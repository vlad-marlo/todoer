// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComVladMarloTodoerInternalModel(in *jlexer.Lexer, out *GetTasksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "next":
			out.Next = string(in.String())
		case "previous":
			out.Previous = string(in.String())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]TaskDTO, 0, 0)
					} else {
						out.Tasks = []TaskDTO{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TaskDTO
					(v1).UnmarshalEasyJSON(in)
					out.Tasks = append(out.Tasks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComVladMarloTodoerInternalModel(out *jwriter.Writer, in GetTasksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"next\":"
		out.RawString(prefix)
		out.String(string(in.Next))
	}
	{
		const prefix string = ",\"previous\":"
		out.RawString(prefix)
		out.String(string(in.Previous))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tasks {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetTasksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComVladMarloTodoerInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTasksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComVladMarloTodoerInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetTasksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComVladMarloTodoerInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTasksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComVladMarloTodoerInternalModel(l, v)
}
func easyjson559270aeDecodeGithubComVladMarloTodoerInternalModel1(in *jlexer.Lexer, out *CreateTaskResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "task":
			out.Task = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComVladMarloTodoerInternalModel1(out *jwriter.Writer, in CreateTaskResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"task\":"
		out.RawString(prefix)
		out.String(string(in.Task))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateTaskResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComVladMarloTodoerInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateTaskResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComVladMarloTodoerInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateTaskResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComVladMarloTodoerInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateTaskResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComVladMarloTodoerInternalModel1(l, v)
}
